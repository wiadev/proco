{"version":3,"sources":["../../src/commands/acl.js"],"names":["Commands","ACL","vorpal","command","action","args","cb","token","createCustomToken","uid","log","self","group","setGroupMembership","then","isInGroup","status","console","resetAccess","listMembersFor","members","length","forEach","member","listGroupsFor","groups"],"mappings":"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","file":"acl.js","sourcesContent":["import * as ACL from '../tasks/acl';\n\nexport default function Commands(vorpal) {\n\n  vorpal.command('acl generatetoken <uid>', 'Generates a Firebase token')\n    .action(function (args, cb) {\n      const token = ACL.createCustomToken(args.uid);\n      this.log(`Here's your token:`);\n      this.log(token);\n      if(cb) cb();\n      return token;\n    });\n\n  vorpal.command('acl add <uid> <group>', 'Adds UID given to the group')\n    .action(function (args, cb) {\n      const self = this;\n      const { uid, group } = args;\n      ACL.setGroupMembership(uid, group, true).then(() => {\n        this.log(`${uid} was *added* to the group ${group}`);\n        cb();\n      });\n    });\n\n  vorpal.command('acl check <uid> <group>', 'Checks if UID given is in the group')\n    .action(function (args, cb) {\n      const self = this;\n      const { uid, group } = args;\n      ACL.isInGroup(uid, group).then((status) => {\n        console.log(status)\n        this.log(`${uid} is *${status ? 'IN' : 'NOT IN'}* ${group}`);\n        cb();\n      });\n    });\n\n  vorpal.command('acl reset <uid>', 'Resets groups of a UID')\n    .action(function (args, cb) {\n      const self = this;\n      const { uid, group } = args;\n      ACL.resetAccess(uid).then(() => {\n        this.log(`${uid} was *removed* from *ALL* groups.`);\n        cb();\n      });\n    });\n\n  vorpal.command('acl rm <uid> <group>', 'Removes UID given from the group')\n    .action(function (args, cb) {\n      const self = this;\n      const { uid, group } = args;\n      ACL.setGroupMembership(uid, group, null).then(() => {\n        this.log(`${uid} was *removed* to the group ${group}`);\n        cb();\n      });\n    });\n\n  vorpal.command('acl listmembers <group>', 'Lists members of a group')\n    .action(function (args, cb) {\n      const self = this;\n      const { group } = args;\n      ACL.listMembersFor(group).then((members) => {\n        if (!members || members.length < 1) {\n          self.log(`${group} doesn't have any members.`);\n        } else {\n          self.log(`${group} has these members:`);\n          members.forEach(member => self.log(`${member}`))\n        }\n        cb();\n      });\n    });\n\n\n  vorpal.command('acl listgroups <uid>',  'Lists groups of a given UID')\n    .action(function (args, cb) {\n      const self = this;\n      const { uid } = args;\n      ACL.listGroupsFor(uid).then((groups) => {\n        if (!groups || groups.length < 1) {\n          self.log(`${uid} is not in any group.`);\n        } else {\n          self.log(`${uid} is in these groups:`);\n          groups.forEach(group => self.log(`${group}`))\n        }\n        cb();\n      });\n    });\n\n    return vorpal;\n}\n"]}