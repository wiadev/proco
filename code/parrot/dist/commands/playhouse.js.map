{"version":3,"sources":["../../src/commands/playhouse.js"],"names":["Commands","vorpal","command","action","args","cb","uid","token","execSync","link","log","option","fid","before","Promise","resolve","options","sync","then","getAccessTokenFor","access_token","localStorage","getItem","syncFacebookTestUserList","count","syncFacebookTestUserProfiles","password","syncFacebookTestUserPasswords","syncFacebookTestUsersWithApp","cleanFacebookTestUsersFromApp"],"mappings":";;;;;kBAGwBA,Q;;AAHxB;;;;AACA;;;;AAEe,SAASA,QAAT,CAAkBC,MAAlB,EAA0B;;AAEvCA,SAAOC,OAAP,CAAe,sBAAf,4FACGC,MADH,CACU,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;AAC1B,QAAMC,MAAOF,KAAKE,GAAL,GAAWF,KAAKE,GAAhB,GAAsB,iBAAnC;AACA,QAAMC,QAAQN,OAAOO,QAAP,wBAAqCF,GAArC,CAAd;AACA,QAAMG,OAAO,6CAA6CF,KAA1D;AACA,wBAAKE,IAAL;AACA,SAAKC,GAAL,0CAA+CD,IAA/C;AACAJ;AACD,GARH;;AAUAJ,SAAOC,OAAP,CAAe,qBAAf,iDACGS,MADH,CACU,YADV,EACwB,gEADxB,EAEGA,MAFH,CAEU,aAFV,EAEyB,6FAFzB,EAGGR,MAHH,CAGU,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;AAAA;;AAC1B,QAAMO,MAAMR,KAAKQ,GAAjB;AACA,QAAMC,SAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACpC,UAAIX,KAAKY,OAAL,CAAaC,IAAjB,EAAuB,MAAKP,GAAL,CAAS,uBAAT;AACvB,aAAOK,SAAP;AACH,KAHc,CAAf;AAIAF,WAAOK,IAAP,CAAY,YAAM;AAChB,YAAKR,GAAL;AACA,aAAO,oBAASS,iBAAT,CAA2BP,GAA3B,EAAgCM,IAAhC,CAAqC,wBAAgB;AAC1D,YAAGE,YAAH,EAAiB;AACf,gBAAKV,GAAL,6CAAkDU,YAAlD;AACA,cAAMX,OAAO,mDAAmDW,YAAhE;AACA,8BAAKX,IAAL;AACA,gBAAKC,GAAL,0CAA+CD,IAA/C;AACA,gBAAKC,GAAL;AACD,SAND,MAMO;AACL,gBAAKA,GAAL,gDAAqDE,GAArD;AACD;;AAEDP;AACD,OAZM,CAAP;AAaD,KAfD;AAgBD,GAzBH;;AA4BAJ,SAAOC,OAAP,CAAe,cAAf,EAA+B,kDAA/B,EACGC,MADH,CACU,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;AAAA;;AAE1B,QAAMC,MAAML,OAAOoB,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAZ;;AAEA,QAAI,CAAChB,GAAL,EAAU;AACR,WAAKI,GAAL;AACAL;AACA;AACD;;AAED,SAAKK,GAAL;AACA,WAAO,oBAASa,wBAAT,GAAoCL,IAApC,CAAyC,UAACM,KAAD,EAAW;AACzD,aAAKd,GAAL,CAAYc,KAAZ;AACAnB;AACA,aAAOS,QAAQC,OAAR,EAAP;AACD,KAJM,CAAP;AAKD,GAjBH;;AAmBAd,SAAOC,OAAP,CAAe,kBAAf,EAAmC,0DAAnC,EACGC,MADH,CACU,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;AAAA;;AAE1B,QAAMC,MAAML,OAAOoB,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAZ;;AAEA,QAAI,CAAChB,GAAL,EAAU;AACR,WAAKI,GAAL;AACAL;AACA;AACD;;AAED,SAAKK,GAAL;AACA,SAAKA,GAAL;AACA,WAAO,oBAASe,4BAAT,GAAwCP,IAAxC,CAA6C,UAACM,KAAD,EAAW;AAC7D,aAAKd,GAAL,CAAYc,KAAZ;AACAnB;AACD,KAHM,CAAP;AAID,GAjBH;;AAmBAJ,SAAOC,OAAP,CAAe,8BAAf,EAA+C,0EAA/C,EACGC,MADH,CACU,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;AAAA;;AAE1B,QAAMC,MAAML,OAAOoB,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAZ;;AAEA,QAAI,CAAChB,GAAL,EAAU;AACR,WAAKI,GAAL;AACAL;AACA;AACD;;AAED,QAAMqB,WAAWtB,KAAKsB,QAAL,IAAiB,YAAlC;;AAEA,SAAKhB,GAAL;AACA,WAAO,oBAASiB,6BAAT,CAAuCD,QAAvC,EAAiDR,IAAjD,CAAsD,UAACM,KAAD,EAAW;AACtE,aAAKd,GAAL,CAAYc,KAAZ,oCAAgDE,QAAhD;AACArB;AACA,aAAOS,QAAQC,OAAR,EAAP;AACD,KAJM,CAAP;AAKD,GAnBH;;AAqBAd,SAAOC,OAAP,CAAe,aAAf,EAA8B,2BAA9B,EACGC,MADH,CACU,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;AAAA;;AAE1B,QAAMC,MAAML,OAAOoB,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAZ;;AAEA,QAAI,CAAChB,GAAL,EAAU;AACR,WAAKI,GAAL;AACAL;AACA;AACD;;AAED,SAAKK,GAAL;AACA,WAAO,oBAASkB,4BAAT,GAAwCV,IAAxC,CAA6C,UAACM,KAAD,EAAW;AAC7D,aAAKd,GAAL,CAAYc,KAAZ;AACAnB;AACA,aAAOS,QAAQC,OAAR,EAAP;AACD,KAJM,CAAP;AAKD,GAjBH;;AAmBAd,SAAOC,OAAP,CAAe,cAAf,EAA+B,+BAA/B,EACGC,MADH,CACU,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;AAAA;;AAE1B,QAAMC,MAAML,OAAOoB,YAAP,CAAoBC,OAApB,CAA4B,KAA5B,CAAZ;;AAEA,QAAI,CAAChB,GAAL,EAAU;AACR,WAAKI,GAAL;AACAL;AACA;AACD;;AAED,SAAKK,GAAL;AACA,WAAO,oBAASmB,6BAAT,GAAyCX,IAAzC,CAA8C,UAACM,KAAD,EAAW;AAC9D,aAAKd,GAAL,CAAYc,KAAZ;AACAnB;AACA,aAAOS,QAAQC,OAAR,EAAP;AACD,KAJM,CAAP;AAKD,GAjBH;AAqBD","file":"playhouse.js","sourcesContent":["import open from 'open';\nimport { facebook, playhouse } from '../tasks/playhouse';\n\nexport default function Commands(vorpal) {\n\n  vorpal.command('ph login admin [uid]', `Login to the Playhouse UI with the UID given. If none given, uses 'playhouse_admin'.`)\n    .action(function (args, cb) {\n      const uid = (args.uid ? args.uid : 'playhouse_admin');\n      const token = vorpal.execSync(`acl generatetoken ${uid}`);\n      const link = 'http://localhost:7503/login/admin?token=' + token;\n      open(link);\n      this.log(`If a browser didn't opened, go to: ${link}`);\n      cb();\n    });\n\n  vorpal.command('ph login user <fid>', `Login to the Playhouse UI with a Test User.`)\n    .option('-s, --sync', 'Runs \"ph sync list\" before running. Helps with expired tokens.')\n    .option('-c, --clean', 'Cleans user from the app and our lists before getting the token. This also triggers --sync.')\n    .action(function (args, cb) {\n      const fid = args.fid;\n      const before = new Promise((resolve) => {\n          if (args.options.sync) this.log('Please sync manually.')\n          return resolve();\n      });\n      before.then(() => {\n        this.log(`Getting access token...`);\n        return facebook.getAccessTokenFor(fid).then(access_token => {\n          if(access_token) {\n            this.log(`Got the token! If you must know, it's ${access_token}`);\n            const link = 'http://localhost:7503/login/user?access_token=' + access_token;\n            open(link);\n            this.log(`If a browser didn't opened, go to: ${link}`);\n            this.log(`Also, if there is an error, it may be about expired tokens. Try running with --sync.`);\n          } else {\n            this.log(`We couldn't find a token for Facebook ID ${fid}. Check if the user installed the app or if the ID is correct.`);\n          }\n\n          cb();\n        });\n      });\n    });\n\n\n  vorpal.command('ph sync list', 'Synchronizes the list of our Facebook Test Users')\n    .action(function (args, cb) {\n\n      const uid = vorpal.localStorage.getItem('uid');\n\n      if (!uid) {\n        this.log(`You need an UID with a 'playhouse_writers' permission.`);\n        cb();\n        return;\n      }\n\n      this.log(`Starting to sync...`);\n      return facebook.syncFacebookTestUserList().then((count) => {\n        this.log(`${count} users were sync'd.`);\n        cb();\n        return Promise.resolve();\n      });\n    });\n\n  vorpal.command('ph sync profiles', 'Downloads the profile details of our Facebook Test Users')\n    .action(function (args, cb) {\n\n      const uid = vorpal.localStorage.getItem('uid');\n\n      if (!uid) {\n        this.log(`You need an UID with a 'playhouse_writers' permission.`);\n        cb();\n        return;\n      }\n\n      this.log(`Notice: Remember to always run 'ph sync list' before running this command.`);\n      this.log(`Starting to pulling profile details of our Test Users... This may take a while.`);\n      return facebook.syncFacebookTestUserProfiles().then((count) => {\n        this.log(`${count} users were sync'd.`);\n        cb();\n      });\n    });\n\n  vorpal.command('ph sync passwords [password]', 'Sets passwords of all Test Users to [password]. Defaults to \"bar123bar.\"')\n    .action(function (args, cb) {\n\n      const uid = vorpal.localStorage.getItem('uid');\n\n      if (!uid) {\n        this.log(`You need an UID with a 'playhouse_writers' permission.`);\n        cb();\n        return;\n      }\n\n      const password = args.password || 'bar123bar.';\n\n      this.log(`Starting to set passwords...`);\n      return facebook.syncFacebookTestUserPasswords(password).then((count) => {\n        this.log(`${count} user passwords were set to ${password}`);\n        cb();\n        return Promise.resolve();\n      });\n    });\n\n  vorpal.command('ph sync app', 'Adds all users to the app')\n    .action(function (args, cb) {\n\n      const uid = vorpal.localStorage.getItem('uid');\n\n      if (!uid) {\n        this.log(`You need an UID with a 'playhouse_writers' permission.`);\n        cb();\n        return;\n      }\n\n      this.log(`Starting to add...This *will* take a few minutes.`);\n      return facebook.syncFacebookTestUsersWithApp().then((count) => {\n        this.log(`${count} user were added to the app`);\n        cb();\n        return Promise.resolve();\n      });\n    });\n\n  vorpal.command('ph clean app', 'Cleans all users from the app')\n    .action(function (args, cb) {\n\n      const uid = vorpal.localStorage.getItem('uid');\n\n      if (!uid) {\n        this.log(`You need an UID with a 'playhouse_writers' permission.`);\n        cb();\n        return;\n      }\n\n      this.log(`Starting to clean...This *will* take a seconds minutes.`);\n      return facebook.cleanFacebookTestUsersFromApp().then((count) => {\n        this.log(`${count} user were cleaned from the app`);\n        cb();\n        return Promise.resolve();\n      });\n    });\n\n\n\n}\n"]}