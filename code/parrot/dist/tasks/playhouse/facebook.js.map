{"version":3,"sources":["../../../src/tasks/playhouse/facebook.js"],"names":["testUsersRef","fid","ref","getFakeHuman","name","findName","getAllFacebookTestUsers","previous","data","next","get","appID","then","users","concat","paging","createFacebookTestUser","fields","installed","permissions","join","addToFirebase","post","id","set","deleteFacebookTestUser","delete","child","fidid","getAccessTokenFor","once","snap","val","syncFacebookTestUserList","Promise","all","map","user","update","length","cleanFacebookTestUsersFromApp","syncFacebookTestUsersWithApp","access_token","syncFacebookTestUserProfiles","getFacebookTestUserProfile","fbuser","syncFacebookTestUserPasswords","password","setFacebookTestUserProfile","params"],"mappings":"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","file":"facebook.js","sourcesContent":["import { database, fb, FACEBOOK_API_CONFIG, asArray } from '../../utils';\nimport { cleanAppUser } from '../appUsers';\n\nconst testUsersRef = (fid) => database.ref(`internal/playhouse/test-users/${fid ? fid : ''}`);\n\nimport faker from 'faker';\n\nconst getFakeHuman = () => {\n    return { name: faker.name.findName(), };\n};\n\n\nexport const getAllFacebookTestUsers = (previous = {data: [], next: null}) =>\n  fb.get(previous.next ? previous.next : `${FACEBOOK_API_CONFIG.appID}/accounts/test-users`)\n    .then(data => data.data)\n    .then(data => {\n      let users = previous.data.concat(data.data);\n      if (data.paging && data.paging.next) {\n        return getAllFacebookTestUsers({data: users, next: data.paging.next});\n      }\n      return users;\n    });\n\nexport const createFacebookTestUser = (fields = {\n  installed: true,\n  permissions: ['public_profile', 'user_likes', 'user_friends', 'user_birthday'].join(','),\n  name: faker.name.findName()\n}, addToFirebase = true) =>  fb.post(`${FACEBOOK_API_CONFIG.appID}/accounts/test-users`, fields)\n.then(data => data.data)\n.then(data => {\n  if (!addToFirebase) return data;\n  return testUsersRef(data.id).set(data);\n})\n\nexport const deleteFacebookTestUser = (fid) => fb.delete(fid)\n  .then(() => testUsersRef.child(fidid).set(null));\n\nexport const getAccessTokenFor = (fid) => testUsersRef(fid).child('access_token')\n  .once('value').then(snap => snap.val())\n  .then(data => {\n    syncFacebookTestUserList();  // Tokens expire as soon as they are used. We'll refresh after using one.\n    return data;\n  });\n\nexport const syncFacebookTestUserList = () => getAllFacebookTestUsers()\n  .then(users =>\n    Promise.all(users.map(user => testUsersRef(user.id).update(user))).then(() => users.length)\n  );\n\nexport const cleanFacebookTestUsersFromApp = () => getAllFacebookTestUsers()\n  .then(users =>\n    Promise.all(users.map(user => cleanAppUser(`doll${user.id}`))).then(() => users.length)\n  );\n\n\nexport const syncFacebookTestUsersWithApp = () => getAllFacebookTestUsers()\n  .then(users =>\n    Promise.all(users.map(user =>\n      database.ref(`users/tokens/doll${user.id}/facebook`).set(user.access_token).then(() =>\n        database.ref(`users/info/doll${user.id}/email`).set(`${user.id}@dolls.procoapp.com`).then(() =>\n          database.ref(`users/is/doll${user.id}/network_email_verified`).set(true)\n        )\n      )\n    )).then(() => users.length)\n  );\n\nexport const syncFacebookTestUserProfiles = () => testUsersRef()\n  .once('value')\n  .then(snap => snap.val())\n  .then(data => data ? asArray(data) : [])\n  .then(users =>\n    Promise.all(users.map(user =>\n      getFacebookTestUserProfile(user.id).then(fbuser =>\n        testUsersRef(user.id).update(fbuser)\n      )\n    )).then(() => users.length)\n  );\n\n  export const syncFacebookTestUserPasswords = (password = 'bar123bar.') => testUsersRef()\n    .once('value')\n    .then(snap => snap.val())\n    .then(data => data ? asArray(data) : [])\n    .then(users =>\n      Promise.all(users.map(user =>\n        setFacebookTestUserProfile(user.id, {\n          password\n        })\n      )).then(() => users.length)\n    );\n\nexport const getFacebookTestUserProfile = (fid) => fb.get(fid, {\n  params: {\n    fields: ['id', 'name', 'birthday', 'gender', 'age_range', 'first_name', 'last_name', 'email'].join(',')\n  }\n}).then(data => data.data);\n\nexport const setFacebookTestUserProfile = (fid, data = {}) => fb.post(fid, data).then(data => true);\n\nexport default fb;\n"]}