{
  "rules": {
    "threads": {
      "_": {
        "$thread_id": {
          "$key": {
            ".validate": "newData.hasChildren(['sender']) && (data.val() == null && newData.val() != null) && (auth != null && auth.uid == newData.child('sender').val())",
            "sender": {
              ".validate": "newData.isString() && (auth != null && newData.val() == auth.uid)"
            },
            "$other": {
              ".validate": "false"
            }
          }
        }
      },
      "messages": {
        "$thread_id": {
          "$uid": {
            "$key1": {
              ".validate": "newData.hasChildren(['sender'])",
              "sender": {
                ".validate": "newData.isString() && (auth != null && newData.val() == auth.uid)"
              },
              "$other": {
                ".validate": "false"
              },
              ".read": "auth != null && data.child('sender').val() == auth.uid"
            },
            ".validate": "newData.hasChildren()",
            ".read": "auth != null && auth.uid == $uid"
          }
        }
      }
    },
    "users": {
      "inbox": {
        "$uid": {
          "$mid": {
            "last_message": {
              ".validate": "newData.hasChildren(['sender'])",
              "sender": {
                ".validate": "newData.isString() && (auth != null && newData.val() == auth.uid)"
              },
              "$other": {
                ".validate": "false"
              },
              ".read": "auth != null && data.child('sender').val() == auth.uid"
            }
          }
        }
      },
      "location-data": {
        ".read": "true",
        ".write": "true"
      },
      "answers": {
        "$qid": {
          "$uid": {
            ".validate": "newData.hasChildren(['answer', 'timestamp']) && newData.parent().parent().parent().parent().child('users').child('questions').child($qid).val() != null",
            "answer": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 900"
            },
            "timestamp": {
              ".validate": "newData.isNumber() && newData.val() == now"
            },
            "$other": {
              ".validate": "false"
            },
            ".write": "auth != null && auth.uid == $uid"
          }
        }
      },
      "info": {
        "$uid": {
          ".validate": "newData.hasChildren(['fid', 'first_name', 'last_name'])",
          ".read": "auth != null && auth.uid == $uid",
          ".write": "auth != null && auth.uid == $uid",
          "age_range_on_facebook_min": {
            ".validate": "newData.isNumber()"
          },
          "age_range_on_facebook_max": {
            ".validate": "newData.isNumber()"
          },
          "avatar": {
            ".validate": "newData.isString()"
          },
          "birthday": {
            ".validate": "newData.isString() && newData.val().matches(/^(19|20)\\d\\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/)"
          },
          "fid": {
            ".validate": "newData.isNumber()"
          },
          "first_name": {
            ".validate": "newData.isString()"
          },
          "last_name": {
            ".validate": "newData.isString()"
          },
          "gender": {
            ".validate": "newData.isString() && (newData.val() == 'male' || newData.val() == 'female')"
          },
          "network": {
            ".validate": "newData.isString()"
          },
          "network_email": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": "false"
          }
        }
      },
      "is": {
        "$uid": {
          ".validate": "newData.hasChildren(['fid', 'first_name', 'last_name'])",
          ".read": "auth != null && auth.uid == $uid && (auth != null && auth.uid == $uid)",
          ".write": "auth != null && auth.uid == $uid",
          "age_range_on_facebook_min": {
            ".validate": "newData.isNumber()"
          },
          "age_range_on_facebook_max": {
            ".validate": "newData.isNumber()"
          },
          "avatar": {
            ".validate": "newData.isString()"
          },
          "birthday": {
            ".validate": "newData.isString() && newData.val().matches(/^(19|20)\\d\\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/)"
          },
          "fid": {
            ".validate": "newData.isNumber()"
          },
          "first_name": {
            ".validate": "newData.isString()"
          },
          "last_name": {
            ".validate": "newData.isString()"
          },
          "gender": {
            ".validate": "newData.isString() && (newData.val() == 'male' || newData.val() == 'female')"
          },
          "network": {
            ".validate": "newData.isString()"
          },
          "network_email": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": "false"
          }
        }
      },
      "matches": {
        "$uid": {
          "$mid": {
            ".validate": "newData.isBoolean() && newData.parent().parent().parent().parent().child('users').child('matches' + $mid + '/' + $uid).val() == true",
            ".read": "auth != null && auth.uid == $uid",
            ".write": "auth != null && auth.uid == $uid"
          }
        }
      },
      "questions": {
        "$qid": {
          ".validate": "newData.hasChildren(['current', 'question', 'timestamp'])",
          "current": {
            ".validate": "newData.isBoolean()"
          },
          "question": {
            ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 300"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() == now"
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && newData.val() != null && (auth != null && auth.uid == newData.child('uid').val())"
        }
      },
      "settings": {
        "$uid": {
          ".validate": "newData.hasChildren()",
          ".read": "auth != null && auth.uid == $uid",
          ".write": "auth != null && auth.uid == $uid",
          "notifyAnnouncements": {
            ".validate": "newData.isBoolean()"
          },
          "notifyNewMessages": {
            ".validate": "newData.isBoolean()"
          },
          "suspendDiscovery": {
            ".validate": "newData.isBoolean()"
          },
          "$other": {
            ".validate": "false"
          }
        }
      },
      "summary": {
        "$uid": {
          ".validate": "newData.hasChildren()",
          "age": {
            ".validate": "newData.isNumber()"
          },
          "avatar": {
            ".validate": "newData.isString()"
          },
          "display_name": {
            ".validate": "newData.isString()"
          },
          "gender": {
            ".validate": "newData.isString()"
          },
          "network": {
            ".validate": "newData.isString()"
          },
          "is_online": {
            ".validate": "newData.isBoolean()"
          },
          "$other": {
            ".validate": "false"
          },
          ".read": "root.child('users').child('blocks').child($uid).child(auth.uid).val() == true != true"
        }
      },
      "tokens": {
        "$uid": {
          ".validate": "newData.hasChildren()",
          "fcm": {
            ".validate": "newData.isString()"
          },
          "facebook": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "auth != null && auth.uid == $uid"
        }
      }
    },
    "pools": {
      "$uid": {
        "$mid": {
          ".validate": "newData.hasChildren(['question_id', 'summary']) && !(newData.parent().parent().parent().child('pool').child('exclusions').child($uid).child('users').child($mid).val() != null) && !(newData.parent().parent().parent().child('users').child('matches' + $uid + '/' + $mid).val() == true) && (auth != null && auth.uid == $uid)",
          "question_id": {
            ".validate": "newData.isString() && !(newData.parent().parent().parent().parent().child('pool').child('exclusions').child($uid).child('questions').child(newData.val()).val() != null)"
          },
          "summary": {
            ".validate": "newData.hasChildren(['age', 'gender'])",
            "age": {
              ".validate": "newData.isNumber() && newData.val() >= newData.parent().parent().parent().parent().parent().child('users').child('filters').child(auth.uid).child('ageMin').val() && newData.val() <= newData.parent().parent().parent().parent().parent().child('users').child('filters').child(auth.uid).child('ageMax').val()"
            },
            "gender": {
              ".validate": "newData.isString() && (newData.val() == 'Both' || newData.val() == newData.parent().parent().parent().parent().parent().child('users').child('filters').child(auth.uid).child('gender').val())"
            },
            "$other": {
              ".validate": "false"
            }
          },
          "$other": {
            ".validate": "false"
          }
        }
      }
    },
    "settings": {
      "networks": {
        "list": {
          "$network": {
            "title": {
              ".read": "data.parent().child('allowed').val() == true"
            }
          }
        },
        "email-map": {
          "$network": {
            "title": {
              ".read": "root.child('settings').child('networks').child('list').child($network).child('allowed').val() == true"
            }
          }
        }
      }
    },
    "tests": {
      ".read": "true",
      ".write": "true"
    }
  }
}
