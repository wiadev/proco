isCurrentUser(id) { auth != null && auth.uid == id }
isNotSelf(uid) { auth.uid != uid }
currentUser() { auth.uid }
isUser(uid) { auth != null && uid == currentUser() }

type OnlyCurrentUser extends Object {
  write() { isCurrentUser(uid) }
  read() { isCurrentUser(uid) }
}

type CurrentTimestamp extends Number {
  validate() { this == now }
}

isBlocked(uid) { // This returns true even if only one of them is blocked the other.
  root.users.blocks[uid][currentUser()] == true ||
  root.users.blocks[currentUser()][uid] == true
}

isMatched(uid) {
  root.users['matches/' + uid + '/' + currentUser()] == true ||
  root.users['matches/' + currentUser() + '/' + uid] == true
}

createOnly(value) { prior(value) == null && value != null }

createOrDelete(value) { prior(value) == null || value == null }

path /keyGenerator {
  read() { true }
  write() { true }
}

isAdmin() {
  root.internal.acl.admin[currentUser()] == true
}
