path /threads {
  path /info is ThreadInfo[];

  path /messages/{thread_id} {
    read() { root.threads.info[thread_id].people[currentUser()] != null }

    index() { [ "createdAt" ] }

    path /{uid} is Message[];
  }

}

type ThreadInfo {
  write() { this.people[currentUser()] == true }
  read() { this.people[currentUser()] == true }

  people: Map<String, Boolean>,
  created_at: CurrentTimestamp,
}


path /inboxes {

  read() { true }
  write() { true }

/*
  path /{uid} {
    read() { isCurrentUser(uid) }
  }

  path /{uid}/threads/{thread_id}/last_message is Message {
    write() { isInThread(thread_id, uid) }
  }

  path /{uid}/threads/{thread_id}/unseen_messages/{message_id} is Boolean {
    write() { isInThread(thread_id, uid) }
  }

  path /{uid}/unseen_threads/{thread_id} is Boolean {
    write() { isInThread(thread_id, uid) }
  }
*/
}

//isInThread(thread_id, uid) { root['threads/info/' + thread_id + '/people/' + uid] == true }
isInThread(thread_id, uid) { true }

type ArchivedMessage extends Message {
  read() { false }
}

type Message {
  validate() { createOnly(this) }
  write() { isInThread(thread_id, this.sender) }
  read() { isInThread(thread_id, this.sender) }

  _id: String,
  text: String,
  // createdAt: CurrentTimestamp,
  createdAt: CurrentTimestamp | Null,
  user: String | Null,
  // user: MessageSender,
  image: String | Null,
  type: String | Null,
}

type MessageSender extends String {
  validate() { this == 'proco' || isUser(this) }
}

type MID extends String {}
